import pytest
from main import Solution

solution = Solution()

test_lines = [
    ([['3', '5', '7', '8', '9'], ['3', '5'], '7', '9', '8', '6', '2', '4', '1'],
     [['3', '5'], ['3', '5'], '7', '9', '8', '6', '2', '4', '1']),
    (['9', ['1', '4', '5', '7', '9'], ['1', '5'], '8', '6', '3', ['1', '4', '7'], '2', ['4', '5']],
     ['9', ['1', '4', '5', '7'], ['1', '5'], '8', '6', '3', ['1', '4', '7'], '2', ['4', '5']])
]


@pytest.mark.parametrize('check_line, result_line', test_lines)
def test_remove_known_values_from_line(check_line, result_line):
    solution._remove_known_values_from_line(check_line)
    assert check_line == result_line


test_lines = [
    ([['3'], ['5'], '7', '9', '8', '6', '2', '4', '1'],
     ['3', '5', '7', '9', '8', '6', '2', '4', '1']),
    (['9', ['4', '7'], ['1'], '8', '6', '3', ['1', '4', '7'], '2', ['5']],
     ['9', ['4', '7'], '1', '8', '6', '3', ['1', '4', '7'], '2', '5'])
]


@pytest.mark.parametrize('check_line, result_line', test_lines)
def test_write_known_value_from_hints_in_line(check_line, result_line):
    solution._write_known_value_from_hints_in_line(check_line)
    assert check_line == result_line


test_lines = [
    ([['3'], ['5'], '7', '9', '8', '6', '2', '4', '1'],
     ['3', '5', '7', '9', '8', '6', '2', '4', '1']),
    (['9', ['4', '7'], ['1', '4'], '8', '6', '3', ['1', '4'], '2', ['5']],
     ['9', '7', ['1', '4'], '8', '6', '3', ['1', '4'], '2', '5'])
]


@pytest.mark.parametrize('check_line, result_line', test_lines)
def test_check_unique_value_in_hints_in_line(check_line, result_line):
    solution._check_unique_value_in_hints_in_line(check_line)
    assert check_line == result_line


test_lines = [
    ([['3', '5'], ['3', '5'], ['3', '7'], ['5', '9'], '8', '6', '2', '4', '1'],
     [['3', '5'], ['3', '5'], ['7'], ['9'], '8', '6', '2', '4', '1']),
    ([['3', '5'], ['3', '5'], '7', '9', ['3', '5', '8'], '6', '2', '4', ['1', '3', '5', '8']],
     [['3', '5'], ['3', '5'], '7', '9', ['8'], '6', '2', '4', ['1', '8']]),
    ([['3', '5'], ['3', '5'], ['3', '7'], ['5', '9'], ['3', '5', '8'], '6', '2', '4', ['1', '3', '5', '8']],
     [['3', '5'], ['3', '5'], ['7'], ['9'], ['8'], '6', '2', '4', ['1', '8']])
]


@pytest.mark.parametrize('check_line, result_line', test_lines)
def test_check_unique_value_in_hints_in_line(check_line, result_line):
    solution._remove_unique_pair_in_hints_in_line(check_line)
    assert check_line == result_line



# board = [["5", "3", ".", ".", "7", ".", ".", ".", "."],
#          ["6", ".", ".", "1", "9", "5", ".", ".", "."],
#          [".", "9", "8", ".", ".", ".", ".", "6", "."],
#          ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
#          ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
#          ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
#          [".", "6", ".", ".", ".", ".", "2", "8", "."],
#          [".", ".", ".", "4", "1", "9", ".", ".", "5"],
#          [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
#
# board = [["3", ".", ".", ".", ".", ".", ".", ".", "9"],
#          [".", ".", ".", ".", "7", ".", "1", ".", "2"],
#          [".", ".", ".", ".", ".", "9", "5", ".", "."],
#          [".", "7", ".", ".", "5", ".", ".", ".", "."],
#          ["1", ".", ".", "4", ".", ".", "6", "8", "."],
#          [".", ".", "6", ".", ".", ".", ".", ".", "."],
#          ["7", "1", ".", ".", "9", ".", ".", ".", "5"],
#          [".", ".", ".", ".", ".", "3", "8", ".", "."],
#          ["4", ".", ".", ".", ".", ".", ".", "2", "."]]
#
# board = [["9", ".", ".", "7", ".", "6", ".", ".", "."],
#          [".", "1", ".", "4", "9", ".", ".", "2", "."],
#          [".", "5", ".", "3", ".", ".", "9", ".", "."],
#          [".", "7", ".", "1", "5", "4", ".", ".", "9"],
#          ["4", ".", ".", ".", ".", ".", ".", "8", "1"],
#          ["5", "6", ".", ".", ".", ".", ".", "7", "."],
#          [".", "4", ".", ".", "6", ".", ".", ".", "."],
#          [".", ".", "2", "5", ".", ".", ".", ".", "4"],
#          [".", "9", "6", ".", ".", "2", ".", "5", "."]]
#
# board = [[".", ".", "9", "7", "4", "8", ".", ".", "."],
#          ["7", ".", ".", ".", ".", ".", ".", ".", "."],
#          [".", "2", ".", "1", ".", "9", ".", ".", "."],
#          [".", ".", "7", ".", ".", ".", "2", "4", "."],
#          [".", "6", "4", ".", "1", ".", "5", "9", "."],
#          [".", "9", "8", ".", ".", ".", "3", ".", "."],
#          [".", ".", ".", "8", ".", "3", ".", "2", "."],
#          [".", ".", ".", ".", ".", ".", ".", ".", "6"],
#          [".", ".", ".", "2", "7", "5", "9", ".", "."]]

# def test_solveSudoku()